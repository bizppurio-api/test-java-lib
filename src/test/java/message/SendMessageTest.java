/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package message;


import main.java.bizapiLib.action.BizAction;
import main.java.bizapiLib.action.TokenIssuer;
import main.java.bizapiLib.action.send.*;
import main.java.bizapiLib.bizFacotry.attachment.kakao.KakaoButton;
import main.java.bizapiLib.bizFacotry.attachment.kakao.KakaoButtonFactory;
import main.java.bizapiLib.bizFacotry.attachment.kakao.KakaoImage;
import main.java.bizapiLib.bizFacotry.attachment.rcs.RcsAction;
import main.java.bizapiLib.bizFacotry.attachment.rcs.RcsButtonFactory;
import main.java.bizapiLib.bizFacotry.message.*;
import main.java.bizapiLib.common.BizapiDefine;
import main.java.bizapiLib.common.RcsMessage;
import main.java.bizapiLib.response.FileResponse;
import main.java.bizapiLib.response.MessageResponse;
import main.java.bizapiLib.response.TokenResponse;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.File;

import static org.junit.Assert.*;
public class SendMessageTest {
    private static TokenIssuer tokenIssuer;
    private static SMSFactory sms;
    private static LMSFactory lms;
    private static MMSFactory mms;
    private static ATFactory at;
    private static FTFactory ft;
    private static RCSFactory rcs;
    private static KakaoButtonFactory kakaoButtonFactory;
    private static RcsButtonFactory rcsButtonFactory;

    @BeforeClass
    public static void setToken() throws Exception {
        tokenIssuer = new TokenIssuer("account", "password");
        tokenIssuer.certificateIgnored();
        tokenIssuer.setDomain(BizapiDefine.BIZAPI_STAGING_DOMAIN);

        TokenResponse t = tokenIssuer.execute();
        sms = new SMSFactory(tokenIssuer);
        lms = new LMSFactory(tokenIssuer);
        mms = new MMSFactory(tokenIssuer);
        at = new ATFactory(tokenIssuer);
        ft = new FTFactory(tokenIssuer);
        rcs = new RCSFactory(tokenIssuer);
        kakaoButtonFactory = new KakaoButtonFactory();
        rcsButtonFactory = new RcsButtonFactory();
    }

    public void execute(BizAction action) throws Exception {
        MessageResponse response = (MessageResponse) action.execute();
        try {
            assertEquals(200, response.getResponseCode());
        } catch (AssertionError e) {
            System.out.println(response);
            throw e;
        }
    }

    @Test
    public void smsBuilderTest() throws Exception {
        SMSSend smsSend = sms.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an sms message is 90 bytes.");
        execute(smsSend);
    }

    @Test
    public void smsRequiredTest() throws Exception {
        SMSSend smsSend = sms.sendAction("refkey", "01012341234", "01012341234","The maximum size of an sms message is 90 bytes.");
        execute(smsSend);
    }

    @Test
    public void lmsTest() throws Exception {
        LMSSend lmsSend = lms.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an lms message is 2000 bytes.").subject("z");
        execute(lmsSend);
    }

    @Test
    public void mmsTest() throws Exception {
        MMSSendFile mmsSendFile = mms.sendFileAction().file(new File("D:/bg.jpg"));
        FileResponse fileResponse = mmsSendFile.execute();
        String fileKey = fileResponse.getFilekey();

        MMSSend mmsSend = mms.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an lms message is 2000 bytes.").filekey(fileKey);
//        MMSSend mmsSend2 = mms.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an lms message is 2000 bytes.").filekey(fileKey, fileKey);
        execute(mmsSend);
    }

    @Test
    public void atTest() throws Exception {
        ATSend atSend = at.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an at message is 1000 length.").senderkey("senderkey").templatecode("templatecode");
        execute(atSend);
    }

    @Test
    public void atButtonTest() throws Exception {
        KakaoButton wl = kakaoButtonFactory.createWL("Web Link", "http://www.daou.co.kr");
        KakaoButton al = kakaoButtonFactory.createAL("App Link").setScheme_android("examplescheme://").setScheme_ios("examplescheme://");

        ATSend atSend = at.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an at message is 1000 length.").senderkey("senderkey").templatecode("templatecode").button(wl);
//        ATSend atSend2 = at.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an at message is 1000 length.").senderkey("senderkey").templatecode("templatecode").button(wl, al);
        execute(atSend);
    }

    @Test
    public void ftTest() throws Exception {
        FTSend ftSend = ft.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an ft message is 1000 length.").senderkey("senderkey");
        execute(ftSend);
    }

    @Test
    public void ftButtonTest() throws Exception {
        KakaoButton wl = kakaoButtonFactory.createWL("Web Link", "http://www.daou.co.kr");
        KakaoButton al = kakaoButtonFactory.createAL("App Link").setScheme_android("examplescheme://").setScheme_ios("examplescheme://");

        FTSend ftSend = ft.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an ft message is 1000 length.").senderkey("senderkey").button(wl);
//        FTSend ftSend2 = ft.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an ft message is 1000 length.").senderkey("senderkey").button(wl, al);
        execute(ftSend);
    }

    @Test
    public void ftImageTest() throws Exception {
        KakaoImage image = new KakaoImage().img_link("http://biz.ppurio.com").img_url("http://mud-kage.kakao.com/dn/eT0dS/btqgD0SfyDm/mew7hXDlQnkYo9SHakjPD1/img_l.jpg");

        FTSend ftSend = ft.sendAction().refeky("refkey").to("01012341234").from("01012341234").message("The maximum size of an ft message is 1000 length.").senderkey("senderkey").image(image);
        execute(ftSend);
    }

    @Test
    public void rcsTest() throws Exception {
        RcsMessage rcsMessage = rcs.createMessage("The maximum size of an rcs sms is 100 length.");
        RCSSend rcsSend = rcs.sendAction().refeky("refkey").to("01012341234").from("01012341234").message(rcsMessage).messagebaseid("SS000000").chatbotid("123412324").header("1").footer("footer");
        execute(rcsSend);
    }

    @Test
    public void rcsTemplateTest() throws Exception {
        RcsMessage rcsMessage = rcs.createMessage("RTS test message.").addVariable("id", "daouid");
        RCSSend rcsSend = rcs.sendAction().refeky("refkey").to("01012341234").from("01012341234").message(rcsMessage).messagebaseid("rtsTemplate").chatbotid("123412324").header("1").footer("footer");
        execute(rcsSend);
    }

    @Test
    public void rcsOneButtonTest() throws Exception {
        RcsMessage rcsMessage = rcs.createMessage("The maximum size of an rcs lms is 1300 length.");
        RcsAction openUrl = rcsButtonFactory.openUrlAction("open url").url("http://www.daou.co.kr");
        RcsAction[] suggestions = rcsButtonFactory.createSuggestions(openUrl);

        RCSSend rcsSend = rcs.sendAction().refeky("refkey").to("01012341234").from("01012341234").message(rcsMessage).messagebaseid("SL000000").chatbotid("123412324").header("1").footer("footer").button(suggestions);
        execute(rcsSend);
    }

    @Test
    public void rcsTwoButtonTest() throws Exception {
        RcsMessage rcsMessage = rcs.createMessage("The maximum size of an rcs lms is 1300 length.");
        RcsAction openUrl = rcsButtonFactory.openUrlAction("open url").url("http://www.daou.co.kr");
        RcsAction copyClipboard = rcsButtonFactory.createCopyToClipboardAction("copy clipboard").text("text copy");
        RcsAction[] suggestions = rcsButtonFactory.createSuggestions(openUrl, copyClipboard);

        RCSSend rcsSend = rcs.sendAction().refeky("refkey").to("01012341234").from("01012341234").message(rcsMessage).messagebaseid("SL000000").chatbotid("123412324").header("1").footer("footer").button(suggestions);
        execute(rcsSend);
    }

    @Test
    public void rcsCardTest() throws Exception {
        // card 1 : 2 button
        // card 2 : 0 button
        // card 3 : 1 button
        RcsMessage rcsMessage1 = rcs.createMessage("The maximum size of an rcs lms is 1300 length.").title("title");
        RcsMessage rcsMessage2 = rcs.createMessage("The maximum size of an rcs lms is 1300 length.");
        RcsMessage rcsMessage3 = rcs.createMessage("The maximum size of an rcs lms is 1300 length.").title("title2");

        RcsAction openUrl = rcsButtonFactory.openUrlAction("open url").url("http://www.daou.co.kr");
        RcsAction copyClipboard = rcsButtonFactory.createCopyToClipboardAction("copy clipboard").text("text copy");

        RcsAction[] suggestions1 = rcsButtonFactory.createSuggestions(openUrl, copyClipboard);
        RcsAction[] suggestions2 = rcsButtonFactory.createSuggestions();
        RcsAction[] suggestions3 = rcsButtonFactory.createSuggestions(copyClipboard);


        RCSSend rcsSend = rcs.sendAction().refeky("refkey").to("01012341234").from("01012341234").message(rcsMessage1, rcsMessage2, rcsMessage3)
                .messagebaseid("SL000000").chatbotid("123412324").header("1").footer("footer").button(suggestions1, suggestions2, suggestions3);
        execute(rcsSend);
    }

}
